type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | RBRACKET
  | LBRACKET
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | VOID
  | FLOAT
  | CHAR
  | LITERAL of (int)
  | FLOAT_LITERAL of (float)
  | STRING_LITERAL of (string)
  | ID of (string)
  | CHAR_LITERAL of (char)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 48 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* RBRACKET *);
  264 (* LBRACKET *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* NOT *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* LT *);
  274 (* LEQ *);
  275 (* GT *);
  276 (* GEQ *);
  277 (* TRUE *);
  278 (* FALSE *);
  279 (* AND *);
  280 (* OR *);
  281 (* RETURN *);
  282 (* IF *);
  283 (* ELSE *);
  284 (* FOR *);
  285 (* WHILE *);
  286 (* INT *);
  287 (* BOOL *);
  288 (* VOID *);
  289 (* FLOAT *);
  290 (* CHAR *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  291 (* LITERAL *);
  292 (* FLOAT_LITERAL *);
  293 (* STRING_LITERAL *);
  294 (* ID *);
  295 (* CHAR_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\010\000\012\000\
\011\000\011\000\007\000\007\000\003\000\008\000\008\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\015\000\
\015\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\016\000\016\000\017\000\017\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\005\000\001\000\
\000\000\003\000\000\000\002\000\003\000\000\000\002\000\002\000\
\002\000\003\000\003\000\005\000\007\000\009\000\005\000\000\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\004\000\
\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\062\000\000\000\010\000\011\000\012\000\013\000\
\014\000\001\000\003\000\004\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\019\000\000\000\
\000\000\009\000\020\000\000\000\000\000\000\000\000\000\022\000\
\005\000\000\000\000\000\038\000\039\000\000\000\000\000\000\000\
\000\000\034\000\037\000\035\000\000\000\036\000\023\000\000\000\
\000\000\000\000\053\000\054\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\057\000\027\000\026\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\000\000\000\000\000\000\031\000\000\000\
\000\000\000\000\029\000\000\000\000\000\030\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\012\000\013\000\018\000\025\000\029\000\
\019\000\000\000\000\000\000\000\047\000\048\000\078\000\081\000\
\082\000"

let yysindex = "\004\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\234\254\056\255\000\000\040\255\
\239\254\045\255\046\255\000\000\057\255\040\255\000\000\016\255\
\040\255\000\000\000\000\058\255\079\255\081\255\232\255\000\000\
\000\000\232\255\232\255\000\000\000\000\041\255\092\255\095\255\
\096\255\000\000\000\000\000\000\000\255\000\000\000\000\055\000\
\005\001\117\255\000\000\000\000\000\000\075\000\232\255\232\255\
\232\255\232\255\232\255\000\000\232\255\232\255\232\255\232\255\
\232\255\232\255\232\255\232\255\232\255\232\255\232\255\232\255\
\000\000\000\000\000\000\023\001\057\001\090\255\041\001\057\001\
\099\255\093\255\057\001\053\255\053\255\000\000\000\000\085\001\
\085\001\076\255\076\255\076\255\076\255\073\001\007\000\223\255\
\232\255\223\255\000\000\232\255\082\255\095\000\000\000\057\001\
\223\255\232\255\000\000\100\255\223\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\103\255\
\000\000\000\000\107\255\000\000\000\000\000\000\000\000\000\000\
\155\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\110\255\
\000\000\120\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\019\255\000\000\000\000\011\255\
\000\000\121\255\043\255\119\000\143\000\000\000\000\000\044\255\
\245\000\167\000\191\000\215\000\239\000\089\255\005\255\000\000\
\000\000\000\000\000\000\000\000\193\255\000\000\000\000\050\255\
\000\000\122\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\101\000\000\000\249\255\000\000\000\000\088\000\
\000\000\000\000\000\000\000\000\170\255\225\255\022\000\000\000\
\000\000"

let yytablesize = 617
let yytable = "\049\000\
\010\000\058\000\051\000\052\000\001\000\052\000\054\000\052\000\
\017\000\101\000\052\000\103\000\059\000\060\000\024\000\014\000\
\060\000\028\000\107\000\033\000\020\000\033\000\110\000\076\000\
\077\000\079\000\080\000\083\000\052\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\053\000\031\000\055\000\045\000\055\000\045\000\021\000\
\055\000\045\000\034\000\022\000\061\000\026\000\035\000\061\000\
\015\000\016\000\045\000\045\000\023\000\036\000\037\000\063\000\
\064\000\102\000\045\000\045\000\104\000\005\000\006\000\007\000\
\008\000\009\000\077\000\042\000\043\000\044\000\045\000\046\000\
\031\000\015\000\032\000\033\000\061\000\062\000\063\000\064\000\
\034\000\051\000\097\000\051\000\035\000\055\000\051\000\030\000\
\056\000\057\000\100\000\036\000\037\000\099\000\109\000\038\000\
\039\000\006\000\040\000\041\000\105\000\007\000\032\000\051\000\
\051\000\042\000\043\000\044\000\045\000\046\000\031\000\050\000\
\032\000\074\000\058\000\059\000\032\000\027\000\034\000\108\000\
\000\000\000\000\035\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\000\037\000\000\000\000\000\038\000\039\000\000\000\
\040\000\041\000\000\000\000\000\000\000\000\000\000\000\042\000\
\043\000\044\000\045\000\046\000\022\000\000\000\022\000\022\000\
\000\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\022\000\000\000\000\000\022\000\022\000\000\000\022\000\022\000\
\000\000\000\000\000\000\000\000\000\000\022\000\022\000\022\000\
\022\000\022\000\028\000\000\000\028\000\028\000\000\000\000\000\
\000\000\000\000\028\000\000\000\000\000\000\000\028\000\000\000\
\000\000\000\000\000\000\000\000\000\000\028\000\028\000\000\000\
\000\000\028\000\028\000\000\000\028\000\028\000\000\000\000\000\
\031\000\000\000\032\000\028\000\028\000\028\000\028\000\028\000\
\034\000\031\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\034\000\000\000\036\000\037\000\035\000\000\000\038\000\
\039\000\000\000\040\000\041\000\036\000\037\000\000\000\000\000\
\000\000\042\000\043\000\044\000\045\000\046\000\000\000\000\000\
\000\000\000\000\042\000\043\000\044\000\045\000\046\000\061\000\
\062\000\063\000\064\000\000\000\000\000\065\000\066\000\067\000\
\068\000\069\000\070\000\000\000\000\000\071\000\005\000\006\000\
\007\000\008\000\009\000\040\000\000\000\040\000\000\000\000\000\
\040\000\000\000\000\000\040\000\040\000\040\000\040\000\000\000\
\000\000\040\000\040\000\040\000\040\000\040\000\040\000\060\000\
\000\000\040\000\040\000\000\000\000\000\000\000\000\000\061\000\
\062\000\063\000\064\000\000\000\000\000\065\000\066\000\067\000\
\068\000\069\000\070\000\075\000\000\000\071\000\072\000\000\000\
\000\000\000\000\000\000\061\000\062\000\063\000\064\000\000\000\
\000\000\065\000\066\000\067\000\068\000\069\000\070\000\106\000\
\000\000\071\000\072\000\000\000\000\000\000\000\000\000\061\000\
\062\000\063\000\064\000\000\000\000\000\065\000\066\000\067\000\
\068\000\069\000\070\000\000\000\000\000\071\000\072\000\041\000\
\000\000\041\000\000\000\000\000\041\000\000\000\000\000\041\000\
\041\000\000\000\000\000\000\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\000\000\000\000\041\000\041\000\042\000\
\000\000\042\000\000\000\000\000\042\000\000\000\000\000\042\000\
\042\000\000\000\000\000\000\000\000\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\000\000\042\000\042\000\047\000\
\000\000\047\000\000\000\000\000\047\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\047\000\047\000\
\047\000\047\000\047\000\000\000\000\000\047\000\047\000\048\000\
\000\000\048\000\000\000\000\000\048\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\000\000\000\000\048\000\048\000\049\000\
\000\000\049\000\000\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\049\000\049\000\
\049\000\049\000\049\000\000\000\000\000\049\000\049\000\050\000\
\000\000\050\000\000\000\000\000\050\000\046\000\000\000\046\000\
\000\000\000\000\046\000\000\000\000\000\050\000\050\000\050\000\
\050\000\050\000\050\000\046\000\046\000\050\000\050\000\073\000\
\000\000\000\000\000\000\046\000\046\000\061\000\062\000\063\000\
\064\000\000\000\000\000\065\000\066\000\067\000\068\000\069\000\
\070\000\096\000\000\000\071\000\072\000\000\000\000\000\061\000\
\062\000\063\000\064\000\000\000\000\000\065\000\066\000\067\000\
\068\000\069\000\070\000\098\000\000\000\071\000\072\000\000\000\
\000\000\061\000\062\000\063\000\064\000\000\000\000\000\065\000\
\066\000\067\000\068\000\069\000\070\000\000\000\000\000\071\000\
\072\000\061\000\062\000\063\000\064\000\000\000\000\000\065\000\
\066\000\067\000\068\000\069\000\070\000\000\000\000\000\071\000\
\072\000\061\000\062\000\063\000\064\000\000\000\000\000\065\000\
\066\000\067\000\068\000\069\000\070\000\061\000\062\000\063\000\
\064\000\000\000\000\000\000\000\000\000\067\000\068\000\069\000\
\070\000"

let yycheck = "\031\000\
\000\000\002\001\034\000\035\000\001\000\001\001\038\000\003\001\
\016\000\096\000\006\001\098\000\013\001\003\001\022\000\038\001\
\006\001\025\000\105\000\001\001\038\001\003\001\109\000\055\000\
\056\000\057\000\058\000\059\000\024\001\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\001\001\002\001\001\001\001\001\003\001\003\001\003\001\
\006\001\006\001\010\001\006\001\003\001\038\001\014\001\006\001\
\001\001\002\001\015\001\016\001\004\001\021\001\022\001\011\001\
\012\001\097\000\023\001\024\001\100\000\030\001\031\001\032\001\
\033\001\034\001\106\000\035\001\036\001\037\001\038\001\039\001\
\002\001\001\001\004\001\005\001\009\001\010\001\011\001\012\001\
\010\001\001\001\001\001\003\001\014\001\002\001\006\001\038\001\
\002\001\002\001\006\001\021\001\022\001\003\001\003\001\025\001\
\026\001\003\001\028\001\029\001\027\001\003\001\001\001\023\001\
\024\001\035\001\036\001\037\001\038\001\039\001\002\001\032\000\
\004\001\005\001\003\001\003\001\003\001\025\000\010\001\106\000\
\255\255\255\255\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\255\255\255\255\025\001\026\001\255\255\
\028\001\029\001\255\255\255\255\255\255\255\255\255\255\035\001\
\036\001\037\001\038\001\039\001\002\001\255\255\004\001\005\001\
\255\255\255\255\255\255\255\255\010\001\255\255\255\255\255\255\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\022\001\255\255\255\255\025\001\026\001\255\255\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\002\001\255\255\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\255\255\255\255\255\255\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\255\255\
\255\255\025\001\026\001\255\255\028\001\029\001\255\255\255\255\
\002\001\255\255\004\001\035\001\036\001\037\001\038\001\039\001\
\010\001\002\001\255\255\255\255\014\001\255\255\255\255\255\255\
\255\255\010\001\255\255\021\001\022\001\014\001\255\255\025\001\
\026\001\255\255\028\001\029\001\021\001\022\001\255\255\255\255\
\255\255\035\001\036\001\037\001\038\001\039\001\255\255\255\255\
\255\255\255\255\035\001\036\001\037\001\038\001\039\001\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\030\001\031\001\
\032\001\033\001\034\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\009\001\010\001\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\001\001\
\255\255\023\001\024\001\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\001\001\255\255\023\001\024\001\255\255\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\001\001\
\255\255\023\001\024\001\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\024\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\009\001\
\010\001\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\024\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\009\001\
\010\001\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\024\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\024\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\024\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\024\001\001\001\
\255\255\003\001\255\255\255\255\006\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\015\001\016\001\023\001\024\001\003\001\
\255\255\255\255\255\255\023\001\024\001\009\001\010\001\011\001\
\012\001\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\003\001\255\255\023\001\024\001\255\255\255\255\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\003\001\255\255\023\001\024\001\255\255\
\255\255\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  RBRACKET\000\
  LBRACKET\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  VOID\000\
  FLOAT\000\
  CHAR\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  FLOAT_LITERAL\000\
  STRING_LITERAL\000\
  ID\000\
  CHAR_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 35 "parser.mly"
            ( _1 )
# 387 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "parser.mly"
                 ( [], [] )
# 393 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 39 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 401 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 40 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 409 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 44 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 424 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
                  ( [] )
# 430 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 52 "parser.mly"
                  ( List.rev _1 )
# 437 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                             ( [(_1,_2)] )
# 445 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
                             ( (_3,_4) :: _1 )
# 454 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
        ( Int )
# 460 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
         ( Bool )
# 466 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
         ( Void )
# 472 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
          ( Float )
# 478 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
         ( Char )
# 484 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'brackets) in
    Obj.repr(
# 68 "parser.mly"
                                   (    L(_1,_2,Arraytype(_1,_4)) )
# 493 "parser.ml"
               : 'array_t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 71 "parser.mly"
      (  Dtype(_1)  )
# 500 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
  ( 1 )
# 506 "parser.ml"
               : 'brackets))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'brackets) in
    Obj.repr(
# 77 "parser.mly"
                               (_1 + 1)
# 513 "parser.ml"
               : 'brackets))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
                     ( [] )
# 519 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 82 "parser.mly"
                     ( _2 :: _1 )
# 527 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 85 "parser.mly"
               ( (_1, _2) )
# 535 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                   ( [] )
# 541 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 89 "parser.mly"
                   ( _2 :: _1 )
# 549 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
              ( Expr _1 )
# 556 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                ( Return Noexpr )
# 562 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                     ( Return _2 )
# 569 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 95 "parser.mly"
                            ( Block(List.rev _2) )
# 576 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 96 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 584 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 97 "parser.mly"
                                            ( If(_3, _5, _7) )
# 593 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 99 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 603 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 100 "parser.mly"
                                  ( While(_3, _5) )
# 611 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
                  ( Noexpr )
# 617 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                  ( _1 )
# 624 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 109 "parser.mly"
                     ( Literal(_1) )
# 631 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
                     ( String_Lit(_1) )
# 638 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 111 "parser.mly"
                     ( Char_Lit(_1) )
# 645 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 112 "parser.mly"
                      (Float_Lit(_1) )
# 652 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
                     ( BoolLit(true) )
# 658 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
                     ( BoolLit(false) )
# 664 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 115 "parser.mly"
                     ( Id(_1) )
# 671 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 679 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 687 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 695 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 703 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 711 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 719 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 727 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 735 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 743 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 751 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 759 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                         ( Unop(Neg, _2) )
# 774 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                     ( Unop(Not, _2) )
# 781 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                     ( Assign(_1, _3) )
# 789 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 131 "parser.mly"
                                 ( Call(_1, _3) )
# 797 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                       ( _2 )
# 804 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "parser.mly"
                  ( [] )
# 810 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 137 "parser.mly"
                  ( List.rev _1 )
# 817 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                            ( [_1] )
# 824 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                            ( _3 :: _1 )
# 832 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
