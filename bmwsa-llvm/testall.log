/usr/bin/lli

###### Testing test-add1
./microc.native < tests/test-add1.bmwsa > test-add1.ll
lli test-add1.ll > test-add1.out
diff -b test-add1.out tests/test-add1.out > test-add1.diff
###### SUCCESS

###### Testing test-arith1
./microc.native < tests/test-arith1.bmwsa > test-arith1.ll
lli test-arith1.ll > test-arith1.out
diff -b test-arith1.out tests/test-arith1.out > test-arith1.diff
###### SUCCESS

###### Testing test-arith2
./microc.native < tests/test-arith2.bmwsa > test-arith2.ll
lli test-arith2.ll > test-arith2.out
diff -b test-arith2.out tests/test-arith2.out > test-arith2.diff
###### SUCCESS

###### Testing test-arith3
./microc.native < tests/test-arith3.bmwsa > test-arith3.ll
lli test-arith3.ll > test-arith3.out
diff -b test-arith3.out tests/test-arith3.out > test-arith3.diff
###### SUCCESS

###### Testing test-comments
./microc.native < tests/test-comments.bmwsa > test-comments.ll
lli test-comments.ll > test-comments.out
diff -b test-comments.out tests/test-comments.out > test-comments.diff
###### SUCCESS

###### Testing test-comments2
./microc.native < tests/test-comments2.bmwsa > test-comments2.ll
lli test-comments2.ll > test-comments2.out
diff -b test-comments2.out tests/test-comments2.out > test-comments2.diff
###### SUCCESS

###### Testing test-countlines
./microc.native < tests/test-countlines.bmwsa > test-countlines.ll
lli test-countlines.ll > test-countlines.out
diff -b test-countlines.out tests/test-countlines.out > test-countlines.diff
FAILED test-countlines.out differs from tests/test-countlines.out
###### FAILED

###### Testing test-fib
./microc.native < tests/test-fib.bmwsa > test-fib.ll
lli test-fib.ll > test-fib.out
diff -b test-fib.out tests/test-fib.out > test-fib.diff
###### SUCCESS

###### Testing test-filetype
./microc.native < tests/test-filetype.bmwsa > test-filetype.ll
lli test-filetype.ll > test-filetype.out
diff -b test-filetype.out tests/test-filetype.out > test-filetype.diff
###### SUCCESS

###### Testing test-float1
./microc.native < tests/test-float1.bmwsa > test-float1.ll
lli test-float1.ll > test-float1.out
diff -b test-float1.out tests/test-float1.out > test-float1.diff
###### SUCCESS

###### Testing test-floatintadd
./microc.native < tests/test-floatintadd.bmwsa > test-floatintadd.ll
lli test-floatintadd.ll > test-floatintadd.out
lli: test-floatintadd.ll:84:109: error: operands of constexpr must have same type
  %printf = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @fmt1, i32 0, i32 0), double add (double 5.200000e+00, i32 4))
                                                                                                            ^
###### FAILED

###### Testing test-fopen
./microc.native < tests/test-fopen.bmwsa > test-fopen.ll
lli test-fopen.ll > test-fopen.out
diff -b test-fopen.out tests/test-fopen.out > test-fopen.diff
###### SUCCESS

###### Testing test-for1
./microc.native < tests/test-for1.bmwsa > test-for1.ll
lli test-for1.ll > test-for1.out
diff -b test-for1.out tests/test-for1.out > test-for1.diff
###### SUCCESS

###### Testing test-for2
./microc.native < tests/test-for2.bmwsa > test-for2.ll
lli test-for2.ll > test-for2.out
diff -b test-for2.out tests/test-for2.out > test-for2.diff
###### SUCCESS

###### Testing test-func1
./microc.native < tests/test-func1.bmwsa > test-func1.ll
lli test-func1.ll > test-func1.out
diff -b test-func1.out tests/test-func1.out > test-func1.diff
###### SUCCESS

###### Testing test-func2
./microc.native < tests/test-func2.bmwsa > test-func2.ll
lli test-func2.ll > test-func2.out
diff -b test-func2.out tests/test-func2.out > test-func2.diff
###### SUCCESS

###### Testing test-func3
./microc.native < tests/test-func3.bmwsa > test-func3.ll
lli test-func3.ll > test-func3.out
diff -b test-func3.out tests/test-func3.out > test-func3.diff
###### SUCCESS

###### Testing test-func4
./microc.native < tests/test-func4.bmwsa > test-func4.ll
lli test-func4.ll > test-func4.out
diff -b test-func4.out tests/test-func4.out > test-func4.diff
###### SUCCESS

###### Testing test-func5
./microc.native < tests/test-func5.bmwsa > test-func5.ll
lli test-func5.ll > test-func5.out
diff -b test-func5.out tests/test-func5.out > test-func5.diff
###### SUCCESS

###### Testing test-func6
./microc.native < tests/test-func6.bmwsa > test-func6.ll
lli test-func6.ll > test-func6.out
diff -b test-func6.out tests/test-func6.out > test-func6.diff
###### SUCCESS

###### Testing test-func7
./microc.native < tests/test-func7.bmwsa > test-func7.ll
lli test-func7.ll > test-func7.out
diff -b test-func7.out tests/test-func7.out > test-func7.diff
###### SUCCESS

###### Testing test-func8
./microc.native < tests/test-func8.bmwsa > test-func8.ll
lli test-func8.ll > test-func8.out
diff -b test-func8.out tests/test-func8.out > test-func8.diff
###### SUCCESS

###### Testing test-gcd
./microc.native < tests/test-gcd.bmwsa > test-gcd.ll
lli test-gcd.ll > test-gcd.out
diff -b test-gcd.out tests/test-gcd.out > test-gcd.diff
###### SUCCESS

###### Testing test-gcd2
./microc.native < tests/test-gcd2.bmwsa > test-gcd2.ll
lli test-gcd2.ll > test-gcd2.out
diff -b test-gcd2.out tests/test-gcd2.out > test-gcd2.diff
###### SUCCESS

###### Testing test-global1
./microc.native < tests/test-global1.bmwsa > test-global1.ll
lli test-global1.ll > test-global1.out
diff -b test-global1.out tests/test-global1.out > test-global1.diff
###### SUCCESS

###### Testing test-global2
./microc.native < tests/test-global2.bmwsa > test-global2.ll
lli test-global2.ll > test-global2.out
diff -b test-global2.out tests/test-global2.out > test-global2.diff
###### SUCCESS

###### Testing test-global3
./microc.native < tests/test-global3.bmwsa > test-global3.ll
lli test-global3.ll > test-global3.out
diff -b test-global3.out tests/test-global3.out > test-global3.diff
###### SUCCESS

###### Testing test-hello
./microc.native < tests/test-hello.bmwsa > test-hello.ll
lli test-hello.ll > test-hello.out
diff -b test-hello.out tests/test-hello.out > test-hello.diff
###### SUCCESS

###### Testing test-helloworld
./microc.native < tests/test-helloworld.bmwsa > test-helloworld.ll
lli test-helloworld.ll > test-helloworld.out
diff -b test-helloworld.out tests/test-helloworld.out > test-helloworld.diff
###### SUCCESS

###### Testing test-if1
./microc.native < tests/test-if1.bmwsa > test-if1.ll
lli test-if1.ll > test-if1.out
diff -b test-if1.out tests/test-if1.out > test-if1.diff
###### SUCCESS

###### Testing test-if2
./microc.native < tests/test-if2.bmwsa > test-if2.ll
lli test-if2.ll > test-if2.out
diff -b test-if2.out tests/test-if2.out > test-if2.diff
###### SUCCESS

###### Testing test-if3
./microc.native < tests/test-if3.bmwsa > test-if3.ll
lli test-if3.ll > test-if3.out
diff -b test-if3.out tests/test-if3.out > test-if3.diff
###### SUCCESS

###### Testing test-if4
./microc.native < tests/test-if4.bmwsa > test-if4.ll
lli test-if4.ll > test-if4.out
diff -b test-if4.out tests/test-if4.out > test-if4.diff
###### SUCCESS

###### Testing test-if5
./microc.native < tests/test-if5.bmwsa > test-if5.ll
lli test-if5.ll > test-if5.out
diff -b test-if5.out tests/test-if5.out > test-if5.diff
###### SUCCESS

###### Testing test-include
./microc.native < tests/test-include.bmwsa > test-include.ll
Fatal error: exception Not_found
###### FAILED

###### Testing test-includedeclare
./microc.native < tests/test-includedeclare.bmwsa > test-includedeclare.ll
lli test-includedeclare.ll > test-includedeclare.out
diff -b test-includedeclare.out tests/test-includedeclare.out > test-includedeclare.diff
###### SUCCESS

###### Testing test-includefunction
./microc.native < tests/test-includefunction.bmwsa > test-includefunction.ll
Fatal error: exception Not_found
###### FAILED

###### Testing test-local1
./microc.native < tests/test-local1.bmwsa > test-local1.ll
lli test-local1.ll > test-local1.out
diff -b test-local1.out tests/test-local1.out > test-local1.diff
###### SUCCESS

###### Testing test-local2
./microc.native < tests/test-local2.bmwsa > test-local2.ll
lli test-local2.ll > test-local2.out
diff -b test-local2.out tests/test-local2.out > test-local2.diff
###### SUCCESS

###### Testing test-ops1
./microc.native < tests/test-ops1.bmwsa > test-ops1.ll
Fatal error: exception Not_found
###### FAILED

###### Testing test-ops2
./microc.native < tests/test-ops2.bmwsa > test-ops2.ll
Fatal error: exception Parsing.Parse_error
###### FAILED

###### Testing test-stringconcat_print
./microc.native < tests/test-stringconcat_print.bmwsa > test-stringconcat_print.ll
lli test-stringconcat_print.ll > test-stringconcat_print.out
lli: test-stringconcat_print.ll:86:105: error: constexpr requires fp operands
  %tmp1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @fmt22, i32 0, i32 0), i8* fadd (i8* getelementptr inbounds ([14 x i8]* @tmp15, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @tmp16, i32 0, i32 0)))
                                                                                                        ^
###### FAILED

###### Testing test-var1
./microc.native < tests/test-var1.bmwsa > test-var1.ll
lli test-var1.ll > test-var1.out
diff -b test-var1.out tests/test-var1.out > test-var1.diff
###### SUCCESS

###### Testing test-var2
./microc.native < tests/test-var2.bmwsa > test-var2.ll
lli test-var2.ll > test-var2.out
diff -b test-var2.out tests/test-var2.out > test-var2.diff
###### SUCCESS

###### Testing test-while1
./microc.native < tests/test-while1.bmwsa > test-while1.ll
lli test-while1.ll > test-while1.out
diff -b test-while1.out tests/test-while1.out > test-while1.diff
###### SUCCESS

###### Testing test-while2
./microc.native < tests/test-while2.bmwsa > test-while2.ll
lli test-while2.ll > test-while2.out
diff -b test-while2.out tests/test-while2.out > test-while2.diff
###### SUCCESS

###### Testing fail-assign1
./microc.native < tests/fail-assign1.bmwsa 2> fail-assign1.err >> testall.log
diff -b fail-assign1.err tests/fail-assign1.err > fail-assign1.diff
FAILED fail-assign1.err differs from tests/fail-assign1.err
###### FAILED

###### Testing fail-assign2
./microc.native < tests/fail-assign2.bmwsa 2> fail-assign2.err >> testall.log
diff -b fail-assign2.err tests/fail-assign2.err > fail-assign2.diff
FAILED fail-assign2.err differs from tests/fail-assign2.err
###### FAILED

###### Testing fail-assign3
./microc.native < tests/fail-assign3.bmwsa 2> fail-assign3.err >> testall.log
diff -b fail-assign3.err tests/fail-assign3.err > fail-assign3.diff
FAILED fail-assign3.err differs from tests/fail-assign3.err
###### FAILED

###### Testing fail-dead1
./microc.native < tests/fail-dead1.bmwsa 2> fail-dead1.err >> testall.log
diff -b fail-dead1.err tests/fail-dead1.err > fail-dead1.diff
FAILED fail-dead1.err differs from tests/fail-dead1.err
###### FAILED

###### Testing fail-dead2
./microc.native < tests/fail-dead2.bmwsa 2> fail-dead2.err >> testall.log
diff -b fail-dead2.err tests/fail-dead2.err > fail-dead2.diff
FAILED fail-dead2.err differs from tests/fail-dead2.err
###### FAILED

###### Testing fail-expr1
./microc.native < tests/fail-expr1.bmwsa 2> fail-expr1.err >> testall.log
diff -b fail-expr1.err tests/fail-expr1.err > fail-expr1.diff
FAILED fail-expr1.err differs from tests/fail-expr1.err
###### FAILED

###### Testing fail-expr2
./microc.native < tests/fail-expr2.bmwsa 2> fail-expr2.err >> testall.log
diff -b fail-expr2.err tests/fail-expr2.err > fail-expr2.diff
FAILED fail-expr2.err differs from tests/fail-expr2.err
###### FAILED

###### Testing fail-floatassign1
./microc.native < tests/fail-floatassign1.bmwsa 2> fail-floatassign1.err >> testall.log
diff -b fail-floatassign1.err tests/fail-floatassign1.err > fail-floatassign1.diff
FAILED fail-floatassign1.err differs from tests/fail-floatassign1.err
###### FAILED

###### Testing fail-for1
./microc.native < tests/fail-for1.bmwsa 2> fail-for1.err >> testall.log
;sbsbsbsbsbsbsb
;sbsbsbsbsbsbsb
diff -b fail-for1.err tests/fail-for1.err > fail-for1.diff
FAILED fail-for1.err differs from tests/fail-for1.err
###### FAILED

###### Testing fail-for2
./microc.native < tests/fail-for2.bmwsa 2> fail-for2.err >> testall.log
;sbsbsbsbsbsbsb
;sbsbsbsbsbsbsb
diff -b fail-for2.err tests/fail-for2.err > fail-for2.diff
FAILED fail-for2.err differs from tests/fail-for2.err
###### FAILED

###### Testing fail-for3
./microc.native < tests/fail-for3.bmwsa 2> fail-for3.err >> testall.log
diff -b fail-for3.err tests/fail-for3.err > fail-for3.diff
FAILED fail-for3.err differs from tests/fail-for3.err
###### FAILED

###### Testing fail-for4
./microc.native < tests/fail-for4.bmwsa 2> fail-for4.err >> testall.log
;sbsbsbsbsbsbsb
;sbsbsbsbsbsbsb
diff -b fail-for4.err tests/fail-for4.err > fail-for4.diff
FAILED fail-for4.err differs from tests/fail-for4.err
###### FAILED

###### Testing fail-for5
./microc.native < tests/fail-for5.bmwsa 2> fail-for5.err >> testall.log
;sbsbsbsbsbsbsb
;sbsbsbsbsbsbsb
diff -b fail-for5.err tests/fail-for5.err > fail-for5.diff
FAILED fail-for5.err differs from tests/fail-for5.err
###### FAILED

###### Testing fail-func1
./microc.native < tests/fail-func1.bmwsa 2> fail-func1.err >> testall.log
diff -b fail-func1.err tests/fail-func1.err > fail-func1.diff
FAILED fail-func1.err differs from tests/fail-func1.err
###### FAILED

###### Testing fail-func2
./microc.native < tests/fail-func2.bmwsa 2> fail-func2.err >> testall.log
;sbsbsbsbsbsbsb
;sbsbsbsbsbsbsb
; ModuleID = 'MicroC'

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt2 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt3 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt4 = private unnamed_addr constant [2 x i8] c"a\00"
@tmp1 = private unnamed_addr constant [2 x i8] c"r\00"
@fmt1 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt22 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt33 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt44 = private unnamed_addr constant [2 x i8] c"a\00"
@fmt5 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt26 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt37 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt48 = private unnamed_addr constant [2 x i8] c"a\00"
@fmt9 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt210 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt311 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt412 = private unnamed_addr constant [2 x i8] c"a\00"

declare i32 @printf(i8*, ...)

declare i1 @feof(i8*)

declare i8 @fgetc(i8*)

declare i8* @fopen(i8*, i8*)

declare i8* @fputs(i8*, i8*)

declare i8* @fseek(i8*, i64, i32)

declare i64 @ftell(i8*)

declare i8 @fputc(i8, i8*)

declare i32 @remove(i8*)

declare i32 @rename(i8*, i8*)

declare i8 @memcpy(i8*, i8*, i32)

declare i8* @malloc(i32)

define i32 @countline(i8* %path) {
entry:
  %path1 = alloca i8*
  store i8* %path, i8** %path1
  %count = alloca i32
  %c = alloca i8
  %f = alloca i8*
  store i32 1, i32* %count
  %path2 = load i8** %path1
  %tmp2 = call i8* @fopen(i8* %path2, i8* getelementptr inbounds ([2 x i8]* @tmp1, i32 0, i32 0))
  store i8* %tmp2, i8** %f
  br label %while

while:                                            ; preds = %merge, %entry
  %f8 = load i8** %f
  %temp19 = call i1 @feof(i8* %f8)
  %tmp10 = xor i1 %temp19, true
  br i1 %tmp10, label %while_body, label %merge11

while_body:                                       ; preds = %while
  %f3 = load i8** %f
  %temp1 = call i8 @fgetc(i8* %f3)
  store i8 %temp1, i8* %c
  %c4 = load i8* %c
  %tmp = icmp eq i8 %c4, 10
  br i1 %tmp, label %then, label %else

merge:                                            ; preds = %else, %then
  br label %while

then:                                             ; preds = %while_body
  %count5 = load i32* %count
  %tmp6 = add i32 %count5, 1
  store i32 %tmp6, i32* %count
  %tmp7 = sub i32 %tmp6, 1
  br label %merge

else:                                             ; preds = %while_body
  br label %merge

merge11:                                          ; preds = %while
  %count12 = load i32* %count
  ret i32 %count12
}

define i32 @main() {
entry:
  ret i32 0
}

define void @bar(i32 %a, i1 %b, i32 %a3) {
entry:
  %a1 = alloca i32
  store i32 %a, i32* %a1
  %b2 = alloca i1
  store i1 %b, i1* %b2
  %a4 = alloca i32
  store i32 %a3, i32* %a4
  ret void
}

define i32 @foo(i32 %a, i1 %b, i32 %c) {
entry:
  %a1 = alloca i32
  store i32 %a, i32* %a1
  %b2 = alloca i1
  store i1 %b, i1* %b2
  %c3 = alloca i32
  store i32 %c, i32* %c3
  ret i32 0
}
###### FAILED

###### Testing fail-func3
./microc.native < tests/fail-func3.bmwsa 2> fail-func3.err >> testall.log
diff -b fail-func3.err tests/fail-func3.err > fail-func3.diff
FAILED fail-func3.err differs from tests/fail-func3.err
###### FAILED

###### Testing fail-func4
./microc.native < tests/fail-func4.bmwsa 2> fail-func4.err >> testall.log
;sbsbsbsbsbsbsb
;sbsbsbsbsbsbsb
; ModuleID = 'MicroC'

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt2 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt3 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt4 = private unnamed_addr constant [2 x i8] c"a\00"
@tmp1 = private unnamed_addr constant [2 x i8] c"r\00"
@fmt1 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt22 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt33 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt44 = private unnamed_addr constant [2 x i8] c"a\00"
@fmt5 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt26 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt37 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt48 = private unnamed_addr constant [2 x i8] c"a\00"
@fmt9 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt210 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt311 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt412 = private unnamed_addr constant [2 x i8] c"a\00"
@fmt13 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt214 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt315 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt416 = private unnamed_addr constant [2 x i8] c"a\00"
@fmt17 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt218 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt319 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt420 = private unnamed_addr constant [2 x i8] c"a\00"

declare i32 @printf(i8*, ...)

declare i1 @feof(i8*)

declare i8 @fgetc(i8*)

declare i8* @fopen(i8*, i8*)

declare i8* @fputs(i8*, i8*)

declare i8* @fseek(i8*, i64, i32)

declare i64 @ftell(i8*)

declare i8 @fputc(i8, i8*)

declare i32 @remove(i8*)

declare i32 @rename(i8*, i8*)

declare i8 @memcpy(i8*, i8*, i32)

declare i8* @malloc(i32)

define i32 @countline(i8* %path) {
entry:
  %path1 = alloca i8*
  store i8* %path, i8** %path1
  %count = alloca i32
  %c = alloca i8
  %f = alloca i8*
  store i32 1, i32* %count
  %path2 = load i8** %path1
  %tmp2 = call i8* @fopen(i8* %path2, i8* getelementptr inbounds ([2 x i8]* @tmp1, i32 0, i32 0))
  store i8* %tmp2, i8** %f
  br label %while

while:                                            ; preds = %merge, %entry
  %f8 = load i8** %f
  %temp19 = call i1 @feof(i8* %f8)
  %tmp10 = xor i1 %temp19, true
  br i1 %tmp10, label %while_body, label %merge11

while_body:                                       ; preds = %while
  %f3 = load i8** %f
  %temp1 = call i8 @fgetc(i8* %f3)
  store i8 %temp1, i8* %c
  %c4 = load i8* %c
  %tmp = icmp eq i8 %c4, 10
  br i1 %tmp, label %then, label %else

merge:                                            ; preds = %else, %then
  br label %while

then:                                             ; preds = %while_body
  %count5 = load i32* %count
  %tmp6 = add i32 %count5, 1
  store i32 %tmp6, i32* %count
  %tmp7 = sub i32 %tmp6, 1
  br label %merge

else:                                             ; preds = %while_body
  br label %merge

merge11:                                          ; preds = %while
  %count12 = load i32* %count
  ret i32 %count12
}

define i32 @main() {
entry:
  ret i32 0
}

define void @baz() {
entry:
  ret void
}

define i32 @print() {
entry:
  ret i32 0
}

define void @bar() {
entry:
  ret void
}

define i32 @foo() {
entry:
  ret i32 0
}
###### FAILED

###### Testing fail-func5
./microc.native < tests/fail-func5.bmwsa 2> fail-func5.err >> testall.log
diff -b fail-func5.err tests/fail-func5.err > fail-func5.diff
FAILED fail-func5.err differs from tests/fail-func5.err
###### FAILED

###### Testing fail-func6
./microc.native < tests/fail-func6.bmwsa 2> fail-func6.err >> testall.log
diff -b fail-func6.err tests/fail-func6.err > fail-func6.diff
FAILED fail-func6.err differs from tests/fail-func6.err
###### FAILED

###### Testing fail-func7
./microc.native < tests/fail-func7.bmwsa 2> fail-func7.err >> testall.log
diff -b fail-func7.err tests/fail-func7.err > fail-func7.diff
FAILED fail-func7.err differs from tests/fail-func7.err
###### FAILED

###### Testing fail-func8
./microc.native < tests/fail-func8.bmwsa 2> fail-func8.err >> testall.log
diff -b fail-func8.err tests/fail-func8.err > fail-func8.diff
FAILED fail-func8.err differs from tests/fail-func8.err
###### FAILED

###### Testing fail-func9
./microc.native < tests/fail-func9.bmwsa 2> fail-func9.err >> testall.log
diff -b fail-func9.err tests/fail-func9.err > fail-func9.diff
FAILED fail-func9.err differs from tests/fail-func9.err
###### FAILED

###### Testing fail-global1
./microc.native < tests/fail-global1.bmwsa 2> fail-global1.err >> testall.log
;sbsbsbsbsbsbsb
;sbsbsbsbsbsbsb
; ModuleID = 'MicroC'

@a = global i0 0
@b = global i1 false
@c = global i32 0
@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt2 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt3 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt4 = private unnamed_addr constant [2 x i8] c"a\00"
@tmp1 = private unnamed_addr constant [2 x i8] c"r\00"
@fmt1 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt22 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt33 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt44 = private unnamed_addr constant [2 x i8] c"a\00"

declare i32 @printf(i8*, ...)

declare i1 @feof(i8*)

declare i8 @fgetc(i8*)

declare i8* @fopen(i8*, i8*)

declare i8* @fputs(i8*, i8*)

declare i8* @fseek(i8*, i64, i32)

declare i64 @ftell(i8*)

declare i8 @fputc(i8, i8*)

declare i32 @remove(i8*)

declare i32 @rename(i8*, i8*)

declare i8 @memcpy(i8*, i8*, i32)

declare i8* @malloc(i32)

define i32 @countline(i8* %path) {
entry:
  %path1 = alloca i8*
  store i8* %path, i8** %path1
  %count = alloca i32
  %c = alloca i8
  %f = alloca i8*
  store i32 1, i32* %count
  %path2 = load i8** %path1
  %tmp2 = call i8* @fopen(i8* %path2, i8* getelementptr inbounds ([2 x i8]* @tmp1, i32 0, i32 0))
  store i8* %tmp2, i8** %f
  br label %while

while:                                            ; preds = %merge, %entry
  %f8 = load i8** %f
  %temp19 = call i1 @feof(i8* %f8)
  %tmp10 = xor i1 %temp19, true
  br i1 %tmp10, label %while_body, label %merge11

while_body:                                       ; preds = %while
  %f3 = load i8** %f
  %temp1 = call i8 @fgetc(i8* %f3)
  store i8 %temp1, i8* %c
  %c4 = load i8* %c
  %tmp = icmp eq i8 %c4, 10
  br i1 %tmp, label %then, label %else

merge:                                            ; preds = %else, %then
  br label %while

then:                                             ; preds = %while_body
  %count5 = load i32* %count
  %tmp6 = add i32 %count5, 1
  store i32 %tmp6, i32* %count
  %tmp7 = sub i32 %tmp6, 1
  br label %merge

else:                                             ; preds = %while_body
  br label %merge

merge11:                                          ; preds = %while
  %count12 = load i32* %count
  ret i32 %count12
}

define i32 @main() {
entry:
  ret i32 0
}
###### FAILED

###### Testing fail-global2
./microc.native < tests/fail-global2.bmwsa 2> fail-global2.err >> testall.log
;sbsbsbsbsbsbsb
;sbsbsbsbsbsbsb
; ModuleID = 'MicroC'

@b = global i32 0
@a = global i32 0
@c = global i1 false
@b1 = global i32 0
@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt2 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt3 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt4 = private unnamed_addr constant [2 x i8] c"a\00"
@tmp1 = private unnamed_addr constant [2 x i8] c"r\00"
@fmt5 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt26 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt37 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt48 = private unnamed_addr constant [2 x i8] c"a\00"

declare i32 @printf(i8*, ...)

declare i1 @feof(i8*)

declare i8 @fgetc(i8*)

declare i8* @fopen(i8*, i8*)

declare i8* @fputs(i8*, i8*)

declare i8* @fseek(i8*, i64, i32)

declare i64 @ftell(i8*)

declare i8 @fputc(i8, i8*)

declare i32 @remove(i8*)

declare i32 @rename(i8*, i8*)

declare i8 @memcpy(i8*, i8*, i32)

declare i8* @malloc(i32)

define i32 @countline(i8* %path) {
entry:
  %path1 = alloca i8*
  store i8* %path, i8** %path1
  %count = alloca i32
  %c = alloca i8
  %f = alloca i8*
  store i32 1, i32* %count
  %path2 = load i8** %path1
  %tmp2 = call i8* @fopen(i8* %path2, i8* getelementptr inbounds ([2 x i8]* @tmp1, i32 0, i32 0))
  store i8* %tmp2, i8** %f
  br label %while

while:                                            ; preds = %merge, %entry
  %f8 = load i8** %f
  %temp19 = call i1 @feof(i8* %f8)
  %tmp10 = xor i1 %temp19, true
  br i1 %tmp10, label %while_body, label %merge11

while_body:                                       ; preds = %while
  %f3 = load i8** %f
  %temp1 = call i8 @fgetc(i8* %f3)
  store i8 %temp1, i8* %c
  %c4 = load i8* %c
  %tmp = icmp eq i8 %c4, 10
  br i1 %tmp, label %then, label %else

merge:                                            ; preds = %else, %then
  br label %while

then:                                             ; preds = %while_body
  %count5 = load i32* %count
  %tmp6 = add i32 %count5, 1
  store i32 %tmp6, i32* %count
  %tmp7 = sub i32 %tmp6, 1
  br label %merge

else:                                             ; preds = %while_body
  br label %merge

merge11:                                          ; preds = %while
  %count12 = load i32* %count
  ret i32 %count12
}

define i32 @main() {
entry:
  ret i32 0
}
###### FAILED

###### Testing fail-if1
./microc.native < tests/fail-if1.bmwsa 2> fail-if1.err >> testall.log
diff -b fail-if1.err tests/fail-if1.err > fail-if1.diff
FAILED fail-if1.err differs from tests/fail-if1.err
###### FAILED

###### Testing fail-if2
./microc.native < tests/fail-if2.bmwsa 2> fail-if2.err >> testall.log
;sbsbsbsbsbsbsb
;sbsbsbsbsbsbsb
diff -b fail-if2.err tests/fail-if2.err > fail-if2.diff
FAILED fail-if2.err differs from tests/fail-if2.err
###### FAILED

###### Testing fail-if3
./microc.native < tests/fail-if3.bmwsa 2> fail-if3.err >> testall.log
;sbsbsbsbsbsbsb
;sbsbsbsbsbsbsb
diff -b fail-if3.err tests/fail-if3.err > fail-if3.diff
FAILED fail-if3.err differs from tests/fail-if3.err
###### FAILED

###### Testing fail-nomain
./microc.native < tests/fail-nomain.bmwsa 2> fail-nomain.err >> testall.log
;sbsbsbsbsbsbsb
;sbsbsbsbsbsbsb
; ModuleID = 'MicroC'

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt2 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt3 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt4 = private unnamed_addr constant [2 x i8] c"a\00"
@tmp1 = private unnamed_addr constant [2 x i8] c"r\00"

declare i32 @printf(i8*, ...)

declare i1 @feof(i8*)

declare i8 @fgetc(i8*)

declare i8* @fopen(i8*, i8*)

declare i8* @fputs(i8*, i8*)

declare i8* @fseek(i8*, i64, i32)

declare i64 @ftell(i8*)

declare i8 @fputc(i8, i8*)

declare i32 @remove(i8*)

declare i32 @rename(i8*, i8*)

declare i8 @memcpy(i8*, i8*, i32)

declare i8* @malloc(i32)

define i32 @countline(i8* %path) {
entry:
  %path1 = alloca i8*
  store i8* %path, i8** %path1
  %count = alloca i32
  %c = alloca i8
  %f = alloca i8*
  store i32 1, i32* %count
  %path2 = load i8** %path1
  %tmp2 = call i8* @fopen(i8* %path2, i8* getelementptr inbounds ([2 x i8]* @tmp1, i32 0, i32 0))
  store i8* %tmp2, i8** %f
  br label %while

while:                                            ; preds = %merge, %entry
  %f8 = load i8** %f
  %temp19 = call i1 @feof(i8* %f8)
  %tmp10 = xor i1 %temp19, true
  br i1 %tmp10, label %while_body, label %merge11

while_body:                                       ; preds = %while
  %f3 = load i8** %f
  %temp1 = call i8 @fgetc(i8* %f3)
  store i8 %temp1, i8* %c
  %c4 = load i8* %c
  %tmp = icmp eq i8 %c4, 10
  br i1 %tmp, label %then, label %else

merge:                                            ; preds = %else, %then
  br label %while

then:                                             ; preds = %while_body
  %count5 = load i32* %count
  %tmp6 = add i32 %count5, 1
  store i32 %tmp6, i32* %count
  %tmp7 = sub i32 %tmp6, 1
  br label %merge

else:                                             ; preds = %while_body
  br label %merge

merge11:                                          ; preds = %while
  %count12 = load i32* %count
  ret i32 %count12
}
###### FAILED

###### Testing fail-return1
./microc.native < tests/fail-return1.bmwsa 2> fail-return1.err >> testall.log
diff -b fail-return1.err tests/fail-return1.err > fail-return1.diff
FAILED fail-return1.err differs from tests/fail-return1.err
###### FAILED

###### Testing fail-return2
./microc.native < tests/fail-return2.bmwsa 2> fail-return2.err >> testall.log
;sbsbsbsbsbsbsb
;sbsbsbsbsbsbsb
; ModuleID = 'MicroC'

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt2 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt3 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt4 = private unnamed_addr constant [2 x i8] c"a\00"
@tmp1 = private unnamed_addr constant [2 x i8] c"r\00"
@fmt1 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt22 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt33 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt44 = private unnamed_addr constant [2 x i8] c"a\00"
@fmt5 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt26 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt37 = private unnamed_addr constant [4 x i8] c"%c\0A\00"
@fmt48 = private unnamed_addr constant [2 x i8] c"a\00"

declare i32 @printf(i8*, ...)

declare i1 @feof(i8*)

declare i8 @fgetc(i8*)

declare i8* @fopen(i8*, i8*)

declare i8* @fputs(i8*, i8*)

declare i8* @fseek(i8*, i64, i32)

declare i64 @ftell(i8*)

declare i8 @fputc(i8, i8*)

declare i32 @remove(i8*)

declare i32 @rename(i8*, i8*)

declare i8 @memcpy(i8*, i8*, i32)

declare i8* @malloc(i32)

define i32 @countline(i8* %path) {
entry:
  %path1 = alloca i8*
  store i8* %path, i8** %path1
  %count = alloca i32
  %c = alloca i8
  %f = alloca i8*
  store i32 1, i32* %count
  %path2 = load i8** %path1
  %tmp2 = call i8* @fopen(i8* %path2, i8* getelementptr inbounds ([2 x i8]* @tmp1, i32 0, i32 0))
  store i8* %tmp2, i8** %f
  br label %while

while:                                            ; preds = %merge, %entry
  %f8 = load i8** %f
  %temp19 = call i1 @feof(i8* %f8)
  %tmp10 = xor i1 %temp19, true
  br i1 %tmp10, label %while_body, label %merge11

while_body:                                       ; preds = %while
  %f3 = load i8** %f
  %temp1 = call i8 @fgetc(i8* %f3)
  store i8 %temp1, i8* %c
  %c4 = load i8* %c
  %tmp = icmp eq i8 %c4, 10
  br i1 %tmp, label %then, label %else

merge:                                            ; preds = %else, %then
  br label %while

then:                                             ; preds = %while_body
  %count5 = load i32* %count
  %tmp6 = add i32 %count5, 1
  store i32 %tmp6, i32* %count
  %tmp7 = sub i32 %tmp6, 1
  br label %merge

else:                                             ; preds = %while_body
  br label %merge

merge11:                                          ; preds = %while
  %count12 = load i32* %count
  ret i32 %count12
}

define i32 @main() {
entry:
  ret i32 42
}

define void @foo() {
entry:
  br i1 true, label %then, label %else

merge:                                            ; No predecessors!
  ret void

then:                                             ; preds = %entry
  ret void

else:                                             ; preds = %entry
  ret void
}
###### FAILED

###### Testing fail-while1
./microc.native < tests/fail-while1.bmwsa 2> fail-while1.err >> testall.log
diff -b fail-while1.err tests/fail-while1.err > fail-while1.diff
FAILED fail-while1.err differs from tests/fail-while1.err
###### FAILED

###### Testing fail-while2
./microc.native < tests/fail-while2.bmwsa 2> fail-while2.err >> testall.log
;sbsbsbsbsbsbsb
;sbsbsbsbsbsbsb
diff -b fail-while2.err tests/fail-while2.err > fail-while2.diff
FAILED fail-while2.err differs from tests/fail-while2.err
###### FAILED
